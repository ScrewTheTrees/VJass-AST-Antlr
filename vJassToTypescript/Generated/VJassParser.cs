//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/VJass.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class VJassParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, Whitespace=19, Comment=20, LineComment=21, NoVJass=22, WhiteSpaceFragment=23, 
		Number=24, String=25, SingleQuoteString=26, OpenBracket=27, CloseBracket=28, 
		EOL=29, Array=30, Library=31, EndLibrary=32, Optional=33, Globals=34, 
		EndGlobals=35, RequireWords=36, VisibilityScope=37, Constant=38, Not=39, 
		And=40, Or=41, Call=42, Set=43, Interface=44, EndInterface=45, Function=46, 
		EndFunction=47, Takes=48, Return=49, Returns=50, Nothing=51, Method=52, 
		EndMethod=53, Defaults=54, Static=55, Struct=56, EndStruct=57, Extends=58, 
		Operator=59, If=60, EndIf=61, Then=62, ElseIf=63, Else=64, Local=65, Loop=66, 
		ExitWhen=67, EndLoop=68, Implement=69, Initializer=70, Native=71, Scope=72, 
		EndScope=73, Debug=74, Keyword=75, TextMacro=76, EndTextMacro=77, RunTextMacro=78, 
		Module=79, EndModule=80, Identifier=81;
	public const int
		RULE_program = 0, RULE_rootStatement = 1, RULE_libraryStatement = 2, RULE_interfaceStatement = 3, 
		RULE_functionStatement = 4, RULE_structStatement = 5, RULE_rootStatements = 6, 
		RULE_libraryStatements = 7, RULE_interfaceStatements = 8, RULE_functionStatements = 9, 
		RULE_structStatements = 10, RULE_libraryBlock = 11, RULE_libraryRequireBlock = 12, 
		RULE_scopeBlock = 13, RULE_globalsBlock = 14, RULE_globalDeclaration = 15, 
		RULE_interfaceBlock = 16, RULE_interfaceMethodBlock = 17, RULE_interfaceFieldDeclaration = 18, 
		RULE_functionBlock = 19, RULE_functionBlockArguments = 20, RULE_functionBlockReturn = 21, 
		RULE_setStatement = 22, RULE_callStatement = 23, RULE_returnStatement = 24, 
		RULE_localDeclaration = 25, RULE_loopStatement = 26, RULE_implementStatement = 27, 
		RULE_ifStatement = 28, RULE_structStaticIfStatement = 29, RULE_functionStaticIfStatement = 30, 
		RULE_nativeBlock = 31, RULE_methodBlock = 32, RULE_structBlock = 33, RULE_structBlockExtends = 34, 
		RULE_structFieldDeclaration = 35, RULE_moduleBlock = 36, RULE_textMacroBlock = 37, 
		RULE_runTextMacroBlock = 38, RULE_singleExpression = 39, RULE_expressionSequence = 40, 
		RULE_arrayLiteral = 41, RULE_elementList = 42, RULE_initializerBlock = 43, 
		RULE_functionCall = 44, RULE_keyWordStatement = 45;
	public static readonly string[] ruleNames = {
		"program", "rootStatement", "libraryStatement", "interfaceStatement", 
		"functionStatement", "structStatement", "rootStatements", "libraryStatements", 
		"interfaceStatements", "functionStatements", "structStatements", "libraryBlock", 
		"libraryRequireBlock", "scopeBlock", "globalsBlock", "globalDeclaration", 
		"interfaceBlock", "interfaceMethodBlock", "interfaceFieldDeclaration", 
		"functionBlock", "functionBlockArguments", "functionBlockReturn", "setStatement", 
		"callStatement", "returnStatement", "localDeclaration", "loopStatement", 
		"implementStatement", "ifStatement", "structStaticIfStatement", "functionStaticIfStatement", 
		"nativeBlock", "methodBlock", "structBlock", "structBlockExtends", "structFieldDeclaration", 
		"moduleBlock", "textMacroBlock", "runTextMacroBlock", "singleExpression", 
		"expressionSequence", "arrayLiteral", "elementList", "initializerBlock", 
		"functionCall", "keyWordStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'='", "'<'", "'[]'", "'[]='", "'//!'", "'+'", "'-'", "'!='", 
		"'!'", "'('", "')'", "'*'", "'/'", "'=='", "'>'", "'>='", "'<='", null, 
		null, null, null, null, null, null, null, "'['", "']'", null, "'array'", 
		"'library'", "'endlibrary'", "'optional'", "'globals'", "'endglobals'", 
		null, null, "'constant'", "'not'", "'and'", "'or'", "'call'", "'set'", 
		"'interface'", "'endinterface'", "'function'", "'endfunction'", "'takes'", 
		"'return'", "'returns'", "'nothing'", "'method'", "'endmethod'", "'defaults'", 
		"'static'", "'struct'", "'endstruct'", "'extends'", "'operator'", "'if'", 
		"'endif'", "'then'", "'elseif'", "'else'", "'local'", "'loop'", "'exitwhen'", 
		"'endloop'", "'implement'", "'initializer'", "'native'", "'scope'", "'endscope'", 
		"'debug'", "'keyword'", "'textmacro'", "'endtextmacro'", "'runtextmacro'", 
		"'module'", "'endmodule'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "Whitespace", "Comment", "LineComment", 
		"NoVJass", "WhiteSpaceFragment", "Number", "String", "SingleQuoteString", 
		"OpenBracket", "CloseBracket", "EOL", "Array", "Library", "EndLibrary", 
		"Optional", "Globals", "EndGlobals", "RequireWords", "VisibilityScope", 
		"Constant", "Not", "And", "Or", "Call", "Set", "Interface", "EndInterface", 
		"Function", "EndFunction", "Takes", "Return", "Returns", "Nothing", "Method", 
		"EndMethod", "Defaults", "Static", "Struct", "EndStruct", "Extends", "Operator", 
		"If", "EndIf", "Then", "ElseIf", "Else", "Local", "Loop", "ExitWhen", 
		"EndLoop", "Implement", "Initializer", "Native", "Scope", "EndScope", 
		"Debug", "Keyword", "TextMacro", "EndTextMacro", "RunTextMacro", "Module", 
		"EndModule", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VJass.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static VJassParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VJassParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VJassParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public RootStatementsContext rootStatements() {
			return GetRuleContext<RootStatementsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(VJassParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; rootStatements();
			State = 93; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootStatementContext : ParserRuleContext {
		public LibraryBlockContext libraryBlock() {
			return GetRuleContext<LibraryBlockContext>(0);
		}
		public GlobalsBlockContext globalsBlock() {
			return GetRuleContext<GlobalsBlockContext>(0);
		}
		public InterfaceBlockContext interfaceBlock() {
			return GetRuleContext<InterfaceBlockContext>(0);
		}
		public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		public StructBlockContext structBlock() {
			return GetRuleContext<StructBlockContext>(0);
		}
		public NativeBlockContext nativeBlock() {
			return GetRuleContext<NativeBlockContext>(0);
		}
		public KeyWordStatementContext keyWordStatement() {
			return GetRuleContext<KeyWordStatementContext>(0);
		}
		public TextMacroBlockContext textMacroBlock() {
			return GetRuleContext<TextMacroBlockContext>(0);
		}
		public RunTextMacroBlockContext runTextMacroBlock() {
			return GetRuleContext<RunTextMacroBlockContext>(0);
		}
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public RootStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterRootStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitRootStatement(this);
		}
	}

	[RuleVersion(0)]
	public RootStatementContext rootStatement() {
		RootStatementContext _localctx = new RootStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_rootStatement);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; libraryBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96; globalsBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97; interfaceBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98; functionBlock();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 99; structBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 100; nativeBlock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 101; keyWordStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 102; textMacroBlock();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 103; runTextMacroBlock();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 104; moduleBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryStatementContext : ParserRuleContext {
		public GlobalsBlockContext globalsBlock() {
			return GetRuleContext<GlobalsBlockContext>(0);
		}
		public InterfaceBlockContext interfaceBlock() {
			return GetRuleContext<InterfaceBlockContext>(0);
		}
		public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		public MethodBlockContext methodBlock() {
			return GetRuleContext<MethodBlockContext>(0);
		}
		public StructBlockContext structBlock() {
			return GetRuleContext<StructBlockContext>(0);
		}
		public NativeBlockContext nativeBlock() {
			return GetRuleContext<NativeBlockContext>(0);
		}
		public KeyWordStatementContext keyWordStatement() {
			return GetRuleContext<KeyWordStatementContext>(0);
		}
		public TextMacroBlockContext textMacroBlock() {
			return GetRuleContext<TextMacroBlockContext>(0);
		}
		public RunTextMacroBlockContext runTextMacroBlock() {
			return GetRuleContext<RunTextMacroBlockContext>(0);
		}
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public LibraryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterLibraryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitLibraryStatement(this);
		}
	}

	[RuleVersion(0)]
	public LibraryStatementContext libraryStatement() {
		LibraryStatementContext _localctx = new LibraryStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_libraryStatement);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; globalsBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; interfaceBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109; functionBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110; methodBlock();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 111; structBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 112; nativeBlock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 113; keyWordStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 114; textMacroBlock();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 115; runTextMacroBlock();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 116; moduleBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceStatementContext : ParserRuleContext {
		public InterfaceMethodBlockContext interfaceMethodBlock() {
			return GetRuleContext<InterfaceMethodBlockContext>(0);
		}
		public InterfaceFieldDeclarationContext interfaceFieldDeclaration() {
			return GetRuleContext<InterfaceFieldDeclarationContext>(0);
		}
		public TextMacroBlockContext textMacroBlock() {
			return GetRuleContext<TextMacroBlockContext>(0);
		}
		public RunTextMacroBlockContext runTextMacroBlock() {
			return GetRuleContext<RunTextMacroBlockContext>(0);
		}
		public InterfaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterInterfaceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitInterfaceStatement(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceStatementContext interfaceStatement() {
		InterfaceStatementContext _localctx = new InterfaceStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_interfaceStatement);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; interfaceMethodBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; interfaceFieldDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121; textMacroBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 122; runTextMacroBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public LocalDeclarationContext localDeclaration() {
			return GetRuleContext<LocalDeclarationContext>(0);
		}
		public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public FunctionStaticIfStatementContext functionStaticIfStatement() {
			return GetRuleContext<FunctionStaticIfStatementContext>(0);
		}
		public ITerminalNode ExitWhen() { return GetToken(VJassParser.ExitWhen, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public TextMacroBlockContext textMacroBlock() {
			return GetRuleContext<TextMacroBlockContext>(0);
		}
		public RunTextMacroBlockContext runTextMacroBlock() {
			return GetRuleContext<RunTextMacroBlockContext>(0);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterFunctionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitFunctionStatement(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionStatement);
		int _la;
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125; setStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; callStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127; returnStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 128; ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 129; localDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 130; loopStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 131; functionStaticIfStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 132; Match(ExitWhen);
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << Number) | (1L << String) | (1L << SingleQuoteString) | (1L << OpenBracket) | (1L << Not) | (1L << Function))) != 0) || _la==Identifier) {
					{
					State = 133; singleExpression(0);
					}
				}

				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 136; textMacroBlock();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 137; runTextMacroBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructStatementContext : ParserRuleContext {
		public MethodBlockContext methodBlock() {
			return GetRuleContext<MethodBlockContext>(0);
		}
		public ImplementStatementContext implementStatement() {
			return GetRuleContext<ImplementStatementContext>(0);
		}
		public StructStaticIfStatementContext structStaticIfStatement() {
			return GetRuleContext<StructStaticIfStatementContext>(0);
		}
		public TextMacroBlockContext textMacroBlock() {
			return GetRuleContext<TextMacroBlockContext>(0);
		}
		public RunTextMacroBlockContext runTextMacroBlock() {
			return GetRuleContext<RunTextMacroBlockContext>(0);
		}
		public StructFieldDeclarationContext structFieldDeclaration() {
			return GetRuleContext<StructFieldDeclarationContext>(0);
		}
		public StructStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterStructStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitStructStatement(this);
		}
	}

	[RuleVersion(0)]
	public StructStatementContext structStatement() {
		StructStatementContext _localctx = new StructStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_structStatement);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140; methodBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141; implementStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 142; structStaticIfStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 143; textMacroBlock();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 144; runTextMacroBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 145; structFieldDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootStatementsContext : ParserRuleContext {
		public RootStatementContext[] rootStatement() {
			return GetRuleContexts<RootStatementContext>();
		}
		public RootStatementContext rootStatement(int i) {
			return GetRuleContext<RootStatementContext>(i);
		}
		public RootStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterRootStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitRootStatements(this);
		}
	}

	[RuleVersion(0)]
	public RootStatementsContext rootStatements() {
		RootStatementsContext _localctx = new RootStatementsContext(Context, State);
		EnterRule(_localctx, 12, RULE_rootStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << Library) | (1L << Globals) | (1L << VisibilityScope) | (1L << Interface) | (1L << Function) | (1L << Struct))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Native - 71)) | (1L << (Keyword - 71)) | (1L << (Module - 71)))) != 0)) {
				{
				{
				State = 148; rootStatement();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryStatementsContext : ParserRuleContext {
		public LibraryStatementContext[] libraryStatement() {
			return GetRuleContexts<LibraryStatementContext>();
		}
		public LibraryStatementContext libraryStatement(int i) {
			return GetRuleContext<LibraryStatementContext>(i);
		}
		public LibraryStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterLibraryStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitLibraryStatements(this);
		}
	}

	[RuleVersion(0)]
	public LibraryStatementsContext libraryStatements() {
		LibraryStatementsContext _localctx = new LibraryStatementsContext(Context, State);
		EnterRule(_localctx, 14, RULE_libraryStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << Globals) | (1L << VisibilityScope) | (1L << Interface) | (1L << Function) | (1L << Method) | (1L << Static) | (1L << Struct))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Native - 71)) | (1L << (Keyword - 71)) | (1L << (Module - 71)))) != 0)) {
				{
				{
				State = 154; libraryStatement();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceStatementsContext : ParserRuleContext {
		public InterfaceStatementContext[] interfaceStatement() {
			return GetRuleContexts<InterfaceStatementContext>();
		}
		public InterfaceStatementContext interfaceStatement(int i) {
			return GetRuleContext<InterfaceStatementContext>(i);
		}
		public InterfaceStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterInterfaceStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitInterfaceStatements(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceStatementsContext interfaceStatements() {
		InterfaceStatementsContext _localctx = new InterfaceStatementsContext(Context, State);
		EnterRule(_localctx, 16, RULE_interfaceStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5 || _la==Method || _la==Identifier) {
				{
				{
				State = 160; interfaceStatement();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementsContext : ParserRuleContext {
		public FunctionStatementContext[] functionStatement() {
			return GetRuleContexts<FunctionStatementContext>();
		}
		public FunctionStatementContext functionStatement(int i) {
			return GetRuleContext<FunctionStatementContext>(i);
		}
		public FunctionStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterFunctionStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitFunctionStatements(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementsContext functionStatements() {
		FunctionStatementsContext _localctx = new FunctionStatementsContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionStatements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 166; functionStatement();
					}
					} 
				}
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructStatementsContext : ParserRuleContext {
		public StructStatementContext[] structStatement() {
			return GetRuleContexts<StructStatementContext>();
		}
		public StructStatementContext structStatement(int i) {
			return GetRuleContext<StructStatementContext>(i);
		}
		public StructStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterStructStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitStructStatements(this);
		}
	}

	[RuleVersion(0)]
	public StructStatementsContext structStatements() {
		StructStatementsContext _localctx = new StructStatementsContext(Context, State);
		EnterRule(_localctx, 20, RULE_structStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << VisibilityScope) | (1L << Constant) | (1L << Method) | (1L << Static))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Implement - 69)) | (1L << (Debug - 69)) | (1L << (Identifier - 69)))) != 0)) {
				{
				{
				State = 172; structStatement();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryBlockContext : ParserRuleContext {
		public ITerminalNode Library() { return GetToken(VJassParser.Library, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public LibraryStatementsContext libraryStatements() {
			return GetRuleContext<LibraryStatementsContext>(0);
		}
		public ITerminalNode EndLibrary() { return GetToken(VJassParser.EndLibrary, 0); }
		public InitializerBlockContext initializerBlock() {
			return GetRuleContext<InitializerBlockContext>(0);
		}
		public LibraryRequireBlockContext libraryRequireBlock() {
			return GetRuleContext<LibraryRequireBlockContext>(0);
		}
		public LibraryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterLibraryBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitLibraryBlock(this);
		}
	}

	[RuleVersion(0)]
	public LibraryBlockContext libraryBlock() {
		LibraryBlockContext _localctx = new LibraryBlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_libraryBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(Library);
			State = 179; Match(Identifier);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Initializer) {
				{
				State = 180; initializerBlock();
				}
			}

			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RequireWords) {
				{
				State = 183; libraryRequireBlock();
				}
			}

			State = 186; libraryStatements();
			State = 187; Match(EndLibrary);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryRequireBlockContext : ParserRuleContext {
		public ITerminalNode RequireWords() { return GetToken(VJassParser.RequireWords, 0); }
		public ITerminalNode[] Identifier() { return GetTokens(VJassParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(VJassParser.Identifier, i);
		}
		public ITerminalNode[] Optional() { return GetTokens(VJassParser.Optional); }
		public ITerminalNode Optional(int i) {
			return GetToken(VJassParser.Optional, i);
		}
		public ITerminalNode[] EOL() { return GetTokens(VJassParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(VJassParser.EOL, i);
		}
		public LibraryRequireBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryRequireBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterLibraryRequireBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitLibraryRequireBlock(this);
		}
	}

	[RuleVersion(0)]
	public LibraryRequireBlockContext libraryRequireBlock() {
		LibraryRequireBlockContext _localctx = new LibraryRequireBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_libraryRequireBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(RequireWords);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Optional) {
				{
				State = 190; Match(Optional);
				}
			}

			State = 193; Match(Identifier);
			State = 204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 196;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						State = 194; Match(T__0);
						}
						break;
					case 2:
						{
						State = 195;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (_la==EOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					State = 199;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Optional) {
						{
						State = 198; Match(Optional);
						}
					}

					State = 201; Match(Identifier);
					}
					} 
				}
				State = 206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeBlockContext : ParserRuleContext {
		public ITerminalNode Scope() { return GetToken(VJassParser.Scope, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public LibraryStatementsContext libraryStatements() {
			return GetRuleContext<LibraryStatementsContext>(0);
		}
		public ITerminalNode EndScope() { return GetToken(VJassParser.EndScope, 0); }
		public InitializerBlockContext initializerBlock() {
			return GetRuleContext<InitializerBlockContext>(0);
		}
		public ScopeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterScopeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitScopeBlock(this);
		}
	}

	[RuleVersion(0)]
	public ScopeBlockContext scopeBlock() {
		ScopeBlockContext _localctx = new ScopeBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_scopeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(Scope);
			State = 208; Match(Identifier);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Initializer) {
				{
				State = 209; initializerBlock();
				}
			}

			State = 212; libraryStatements();
			State = 213; Match(EndScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalsBlockContext : ParserRuleContext {
		public ITerminalNode Globals() { return GetToken(VJassParser.Globals, 0); }
		public ITerminalNode EndGlobals() { return GetToken(VJassParser.EndGlobals, 0); }
		public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		public GlobalsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalsBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterGlobalsBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitGlobalsBlock(this);
		}
	}

	[RuleVersion(0)]
	public GlobalsBlockContext globalsBlock() {
		GlobalsBlockContext _localctx = new GlobalsBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_globalsBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(Globals);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (VisibilityScope - 37)) | (1L << (Constant - 37)) | (1L << (Identifier - 37)))) != 0)) {
				{
				{
				State = 216; globalDeclaration();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 222; Match(EndGlobals);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDeclarationContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(VJassParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(VJassParser.Identifier, i);
		}
		public ITerminalNode VisibilityScope() { return GetToken(VJassParser.VisibilityScope, 0); }
		public ITerminalNode Constant() { return GetToken(VJassParser.Constant, 0); }
		public ITerminalNode Array() { return GetToken(VJassParser.Array, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public GlobalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDeclarationContext globalDeclaration() {
		GlobalDeclarationContext _localctx = new GlobalDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_globalDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VisibilityScope) {
				{
				State = 224; Match(VisibilityScope);
				}
			}

			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Constant) {
				{
				State = 227; Match(Constant);
				}
			}

			State = 230; Match(Identifier);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Array) {
				{
				State = 231; Match(Array);
				}
			}

			State = 234; Match(Identifier);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 235; Match(T__1);
				State = 236; singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBlockContext : ParserRuleContext {
		public ITerminalNode Interface() { return GetToken(VJassParser.Interface, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public InterfaceStatementsContext interfaceStatements() {
			return GetRuleContext<InterfaceStatementsContext>(0);
		}
		public ITerminalNode EndInterface() { return GetToken(VJassParser.EndInterface, 0); }
		public InterfaceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterInterfaceBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitInterfaceBlock(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBlockContext interfaceBlock() {
		InterfaceBlockContext _localctx = new InterfaceBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_interfaceBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(Interface);
			State = 240; Match(Identifier);
			State = 241; interfaceStatements();
			State = 242; Match(EndInterface);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodBlockContext : ParserRuleContext {
		public ITerminalNode Method() { return GetToken(VJassParser.Method, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public ITerminalNode Takes() { return GetToken(VJassParser.Takes, 0); }
		public FunctionBlockArgumentsContext functionBlockArguments() {
			return GetRuleContext<FunctionBlockArgumentsContext>(0);
		}
		public ITerminalNode Returns() { return GetToken(VJassParser.Returns, 0); }
		public FunctionBlockReturnContext[] functionBlockReturn() {
			return GetRuleContexts<FunctionBlockReturnContext>();
		}
		public FunctionBlockReturnContext functionBlockReturn(int i) {
			return GetRuleContext<FunctionBlockReturnContext>(i);
		}
		public ITerminalNode Defaults() { return GetToken(VJassParser.Defaults, 0); }
		public InterfaceMethodBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodBlock(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodBlockContext interfaceMethodBlock() {
		InterfaceMethodBlockContext _localctx = new InterfaceMethodBlockContext(Context, State);
		EnterRule(_localctx, 34, RULE_interfaceMethodBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(Method);
			State = 245; Match(Identifier);
			State = 246; Match(Takes);
			State = 247; functionBlockArguments();
			State = 248; Match(Returns);
			State = 249; functionBlockReturn();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Defaults) {
				{
				State = 250; Match(Defaults);
				State = 251; functionBlockReturn();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceFieldDeclarationContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(VJassParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(VJassParser.Identifier, i);
		}
		public ITerminalNode Array() { return GetToken(VJassParser.Array, 0); }
		public InterfaceFieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceFieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterInterfaceFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitInterfaceFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceFieldDeclarationContext interfaceFieldDeclaration() {
		InterfaceFieldDeclarationContext _localctx = new InterfaceFieldDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_interfaceFieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(Identifier);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Array) {
				{
				State = 255; Match(Array);
				}
			}

			State = 258; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(VJassParser.Function, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public ITerminalNode Takes() { return GetToken(VJassParser.Takes, 0); }
		public FunctionBlockArgumentsContext functionBlockArguments() {
			return GetRuleContext<FunctionBlockArgumentsContext>(0);
		}
		public ITerminalNode Returns() { return GetToken(VJassParser.Returns, 0); }
		public FunctionBlockReturnContext functionBlockReturn() {
			return GetRuleContext<FunctionBlockReturnContext>(0);
		}
		public FunctionStatementsContext functionStatements() {
			return GetRuleContext<FunctionStatementsContext>(0);
		}
		public ITerminalNode EndFunction() { return GetToken(VJassParser.EndFunction, 0); }
		public ITerminalNode VisibilityScope() { return GetToken(VJassParser.VisibilityScope, 0); }
		public FunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterFunctionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitFunctionBlock(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockContext functionBlock() {
		FunctionBlockContext _localctx = new FunctionBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VisibilityScope) {
				{
				State = 260; Match(VisibilityScope);
				}
			}

			State = 263; Match(Function);
			State = 264; Match(Identifier);
			State = 265; Match(Takes);
			State = 266; functionBlockArguments();
			State = 267; Match(Returns);
			State = 268; functionBlockReturn();
			State = 269; functionStatements();
			State = 270; Match(EndFunction);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockArgumentsContext : ParserRuleContext {
		public ITerminalNode Nothing() { return GetToken(VJassParser.Nothing, 0); }
		public ITerminalNode[] Identifier() { return GetTokens(VJassParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(VJassParser.Identifier, i);
		}
		public FunctionBlockArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterFunctionBlockArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitFunctionBlockArguments(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockArgumentsContext functionBlockArguments() {
		FunctionBlockArgumentsContext _localctx = new FunctionBlockArgumentsContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionBlockArguments);
		int _la;
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Nothing:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; Match(Nothing);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; Match(Identifier);
				State = 274; Match(Identifier);
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 275; Match(T__0);
					State = 276; Match(Identifier);
					State = 277; Match(Identifier);
					}
					}
					State = 282;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockReturnContext : ParserRuleContext {
		public ITerminalNode Nothing() { return GetToken(VJassParser.Nothing, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public FunctionBlockReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlockReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterFunctionBlockReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitFunctionBlockReturn(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockReturnContext functionBlockReturn() {
		FunctionBlockReturnContext _localctx = new FunctionBlockReturnContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionBlockReturn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_la = TokenStream.LA(1);
			if ( !(_la==Nothing || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public ITerminalNode Set() { return GetToken(VJassParser.Set, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Debug() { return GetToken(VJassParser.Debug, 0); }
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterSetStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitSetStatement(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_setStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Debug) {
				{
				State = 287; Match(Debug);
				}
			}

			State = 290; Match(Set);
			State = 291; Match(Identifier);
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << Number) | (1L << String) | (1L << SingleQuoteString) | (1L << OpenBracket) | (1L << Not) | (1L << Function))) != 0) || _la==Identifier) {
				{
				State = 292; singleExpression(0);
				}
			}

			State = 295; Match(T__1);
			State = 296; singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		public ITerminalNode Call() { return GetToken(VJassParser.Call, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode Debug() { return GetToken(VJassParser.Debug, 0); }
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_callStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Debug) {
				{
				State = 298; Match(Debug);
				}
			}

			State = 301; Match(Call);
			State = 302; singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(VJassParser.Return, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(Return);
			State = 305; singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalDeclarationContext : ParserRuleContext {
		public ITerminalNode Local() { return GetToken(VJassParser.Local, 0); }
		public ITerminalNode[] Identifier() { return GetTokens(VJassParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(VJassParser.Identifier, i);
		}
		public ITerminalNode Debug() { return GetToken(VJassParser.Debug, 0); }
		public ITerminalNode Array() { return GetToken(VJassParser.Array, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public LocalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterLocalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitLocalDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalDeclarationContext localDeclaration() {
		LocalDeclarationContext _localctx = new LocalDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_localDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Debug) {
				{
				State = 307; Match(Debug);
				}
			}

			State = 310; Match(Local);
			State = 311; Match(Identifier);
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Array) {
				{
				State = 312; Match(Array);
				}
			}

			State = 315; Match(Identifier);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 316; Match(T__1);
				State = 317; singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		public ITerminalNode Loop() { return GetToken(VJassParser.Loop, 0); }
		public FunctionStatementsContext functionStatements() {
			return GetRuleContext<FunctionStatementsContext>(0);
		}
		public ITerminalNode EndLoop() { return GetToken(VJassParser.EndLoop, 0); }
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; Match(Loop);
			State = 321; functionStatements();
			State = 322; Match(EndLoop);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementStatementContext : ParserRuleContext {
		public ITerminalNode Implement() { return GetToken(VJassParser.Implement, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public ITerminalNode Optional() { return GetToken(VJassParser.Optional, 0); }
		public ImplementStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterImplementStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitImplementStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImplementStatementContext implementStatement() {
		ImplementStatementContext _localctx = new ImplementStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_implementStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(Implement);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Optional) {
				{
				State = 325; Match(Optional);
				}
			}

			State = 328; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(VJassParser.If, 0); }
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode[] Then() { return GetTokens(VJassParser.Then); }
		public ITerminalNode Then(int i) {
			return GetToken(VJassParser.Then, i);
		}
		public FunctionStatementsContext[] functionStatements() {
			return GetRuleContexts<FunctionStatementsContext>();
		}
		public FunctionStatementsContext functionStatements(int i) {
			return GetRuleContext<FunctionStatementsContext>(i);
		}
		public ITerminalNode EndIf() { return GetToken(VJassParser.EndIf, 0); }
		public ITerminalNode[] ElseIf() { return GetTokens(VJassParser.ElseIf); }
		public ITerminalNode ElseIf(int i) {
			return GetToken(VJassParser.ElseIf, i);
		}
		public ITerminalNode Else() { return GetToken(VJassParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(If);
			State = 331; singleExpression(0);
			State = 332; Match(Then);
			State = 333; functionStatements();
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ElseIf) {
				{
				{
				State = 334; Match(ElseIf);
				State = 335; singleExpression(0);
				State = 336; Match(Then);
				State = 337; functionStatements();
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 344; Match(Else);
				State = 345; functionStatements();
				}
			}

			State = 348; Match(EndIf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructStaticIfStatementContext : ParserRuleContext {
		public ITerminalNode Static() { return GetToken(VJassParser.Static, 0); }
		public ITerminalNode If() { return GetToken(VJassParser.If, 0); }
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode[] Then() { return GetTokens(VJassParser.Then); }
		public ITerminalNode Then(int i) {
			return GetToken(VJassParser.Then, i);
		}
		public StructStatementsContext[] structStatements() {
			return GetRuleContexts<StructStatementsContext>();
		}
		public StructStatementsContext structStatements(int i) {
			return GetRuleContext<StructStatementsContext>(i);
		}
		public ITerminalNode EndIf() { return GetToken(VJassParser.EndIf, 0); }
		public ITerminalNode[] ElseIf() { return GetTokens(VJassParser.ElseIf); }
		public ITerminalNode ElseIf(int i) {
			return GetToken(VJassParser.ElseIf, i);
		}
		public ITerminalNode Else() { return GetToken(VJassParser.Else, 0); }
		public StructStaticIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structStaticIfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterStructStaticIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitStructStaticIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public StructStaticIfStatementContext structStaticIfStatement() {
		StructStaticIfStatementContext _localctx = new StructStaticIfStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_structStaticIfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(Static);
			State = 351; Match(If);
			State = 352; singleExpression(0);
			State = 353; Match(Then);
			State = 354; structStatements();
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ElseIf) {
				{
				{
				State = 355; Match(ElseIf);
				State = 356; singleExpression(0);
				State = 357; Match(Then);
				State = 358; structStatements();
				}
				}
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 365; Match(Else);
				State = 366; structStatements();
				}
			}

			State = 369; Match(EndIf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStaticIfStatementContext : ParserRuleContext {
		public ITerminalNode Static() { return GetToken(VJassParser.Static, 0); }
		public ITerminalNode If() { return GetToken(VJassParser.If, 0); }
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode[] Then() { return GetTokens(VJassParser.Then); }
		public ITerminalNode Then(int i) {
			return GetToken(VJassParser.Then, i);
		}
		public FunctionStatementsContext[] functionStatements() {
			return GetRuleContexts<FunctionStatementsContext>();
		}
		public FunctionStatementsContext functionStatements(int i) {
			return GetRuleContext<FunctionStatementsContext>(i);
		}
		public ITerminalNode EndIf() { return GetToken(VJassParser.EndIf, 0); }
		public ITerminalNode[] ElseIf() { return GetTokens(VJassParser.ElseIf); }
		public ITerminalNode ElseIf(int i) {
			return GetToken(VJassParser.ElseIf, i);
		}
		public ITerminalNode Else() { return GetToken(VJassParser.Else, 0); }
		public FunctionStaticIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStaticIfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterFunctionStaticIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitFunctionStaticIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStaticIfStatementContext functionStaticIfStatement() {
		FunctionStaticIfStatementContext _localctx = new FunctionStaticIfStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionStaticIfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(Static);
			State = 372; Match(If);
			State = 373; singleExpression(0);
			State = 374; Match(Then);
			State = 375; functionStatements();
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ElseIf) {
				{
				{
				State = 376; Match(ElseIf);
				State = 377; singleExpression(0);
				State = 378; Match(Then);
				State = 379; functionStatements();
				}
				}
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 386; Match(Else);
				State = 387; functionStatements();
				}
			}

			State = 390; Match(EndIf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeBlockContext : ParserRuleContext {
		public ITerminalNode Native() { return GetToken(VJassParser.Native, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public ITerminalNode Takes() { return GetToken(VJassParser.Takes, 0); }
		public FunctionBlockArgumentsContext functionBlockArguments() {
			return GetRuleContext<FunctionBlockArgumentsContext>(0);
		}
		public ITerminalNode Returns() { return GetToken(VJassParser.Returns, 0); }
		public FunctionBlockReturnContext functionBlockReturn() {
			return GetRuleContext<FunctionBlockReturnContext>(0);
		}
		public NativeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterNativeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitNativeBlock(this);
		}
	}

	[RuleVersion(0)]
	public NativeBlockContext nativeBlock() {
		NativeBlockContext _localctx = new NativeBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_nativeBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; Match(Native);
			State = 393; Match(Identifier);
			State = 394; Match(Takes);
			State = 395; functionBlockArguments();
			State = 396; Match(Returns);
			State = 397; functionBlockReturn();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBlockContext : ParserRuleContext {
		public ITerminalNode Method() { return GetToken(VJassParser.Method, 0); }
		public ITerminalNode Takes() { return GetToken(VJassParser.Takes, 0); }
		public FunctionBlockArgumentsContext functionBlockArguments() {
			return GetRuleContext<FunctionBlockArgumentsContext>(0);
		}
		public ITerminalNode Returns() { return GetToken(VJassParser.Returns, 0); }
		public FunctionBlockReturnContext functionBlockReturn() {
			return GetRuleContext<FunctionBlockReturnContext>(0);
		}
		public FunctionStatementsContext functionStatements() {
			return GetRuleContext<FunctionStatementsContext>(0);
		}
		public ITerminalNode EndMethod() { return GetToken(VJassParser.EndMethod, 0); }
		public ITerminalNode VisibilityScope() { return GetToken(VJassParser.VisibilityScope, 0); }
		public ITerminalNode Static() { return GetToken(VJassParser.Static, 0); }
		public ITerminalNode Operator() { return GetToken(VJassParser.Operator, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public MethodBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterMethodBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitMethodBlock(this);
		}
	}

	[RuleVersion(0)]
	public MethodBlockContext methodBlock() {
		MethodBlockContext _localctx = new MethodBlockContext(Context, State);
		EnterRule(_localctx, 64, RULE_methodBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VisibilityScope) {
				{
				State = 399; Match(VisibilityScope);
				}
			}

			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Static) {
				{
				State = 402; Match(Static);
				}
			}

			State = 405; Match(Method);
			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Operator) {
				{
				State = 406; Match(Operator);
				}
			}

			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 409; Match(Identifier);
				}
			}

			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4))) != 0)) {
				{
				State = 412;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 415; Match(Takes);
			State = 416; functionBlockArguments();
			State = 417; Match(Returns);
			State = 418; functionBlockReturn();
			State = 419; functionStatements();
			State = 420; Match(EndMethod);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBlockContext : ParserRuleContext {
		public ITerminalNode Struct() { return GetToken(VJassParser.Struct, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public StructStatementsContext structStatements() {
			return GetRuleContext<StructStatementsContext>(0);
		}
		public ITerminalNode EndStruct() { return GetToken(VJassParser.EndStruct, 0); }
		public StructBlockExtendsContext structBlockExtends() {
			return GetRuleContext<StructBlockExtendsContext>(0);
		}
		public StructBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterStructBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitStructBlock(this);
		}
	}

	[RuleVersion(0)]
	public StructBlockContext structBlock() {
		StructBlockContext _localctx = new StructBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_structBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(Struct);
			State = 423; Match(Identifier);
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 424; structBlockExtends();
				}
			}

			State = 427; structStatements();
			State = 428; Match(EndStruct);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBlockExtendsContext : ParserRuleContext {
		public ITerminalNode Extends() { return GetToken(VJassParser.Extends, 0); }
		public ITerminalNode[] Identifier() { return GetTokens(VJassParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(VJassParser.Identifier, i);
		}
		public ITerminalNode Array() { return GetToken(VJassParser.Array, 0); }
		public StructBlockExtendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBlockExtends; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterStructBlockExtends(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitStructBlockExtends(this);
		}
	}

	[RuleVersion(0)]
	public StructBlockExtendsContext structBlockExtends() {
		StructBlockExtendsContext _localctx = new StructBlockExtendsContext(Context, State);
		EnterRule(_localctx, 68, RULE_structBlockExtends);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(Extends);
			State = 431;
			_la = TokenStream.LA(1);
			if ( !(_la==Array || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 432; Match(T__0);
				State = 433; Match(Identifier);
				}
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldDeclarationContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(VJassParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(VJassParser.Identifier, i);
		}
		public ITerminalNode Debug() { return GetToken(VJassParser.Debug, 0); }
		public ITerminalNode VisibilityScope() { return GetToken(VJassParser.VisibilityScope, 0); }
		public ITerminalNode Static() { return GetToken(VJassParser.Static, 0); }
		public ITerminalNode Constant() { return GetToken(VJassParser.Constant, 0); }
		public ITerminalNode Array() { return GetToken(VJassParser.Array, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public StructFieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structFieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterStructFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitStructFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldDeclarationContext structFieldDeclaration() {
		StructFieldDeclarationContext _localctx = new StructFieldDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_structFieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Debug) {
				{
				State = 439; Match(Debug);
				}
			}

			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VisibilityScope) {
				{
				State = 442; Match(VisibilityScope);
				}
			}

			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Static) {
				{
				State = 445; Match(Static);
				}
			}

			State = 449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Constant) {
				{
				State = 448; Match(Constant);
				}
			}

			State = 451; Match(Identifier);
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Array) {
				{
				State = 452; Match(Array);
				}
			}

			State = 455; Match(Identifier);
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 456; Match(T__1);
				State = 457; singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBlockContext : ParserRuleContext {
		public ITerminalNode Module() { return GetToken(VJassParser.Module, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public LibraryStatementsContext libraryStatements() {
			return GetRuleContext<LibraryStatementsContext>(0);
		}
		public ITerminalNode EndModule() { return GetToken(VJassParser.EndModule, 0); }
		public ITerminalNode VisibilityScope() { return GetToken(VJassParser.VisibilityScope, 0); }
		public ModuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterModuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitModuleBlock(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBlockContext moduleBlock() {
		ModuleBlockContext _localctx = new ModuleBlockContext(Context, State);
		EnterRule(_localctx, 72, RULE_moduleBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VisibilityScope) {
				{
				State = 460; Match(VisibilityScope);
				}
			}

			State = 463; Match(Module);
			State = 464; Match(Identifier);
			State = 465; libraryStatements();
			State = 466; Match(EndModule);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextMacroBlockContext : ParserRuleContext {
		public ITerminalNode TextMacro() { return GetToken(VJassParser.TextMacro, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public ITerminalNode Takes() { return GetToken(VJassParser.Takes, 0); }
		public FunctionBlockArgumentsContext functionBlockArguments() {
			return GetRuleContext<FunctionBlockArgumentsContext>(0);
		}
		public ITerminalNode EndTextMacro() { return GetToken(VJassParser.EndTextMacro, 0); }
		public FunctionStatementsContext functionStatements() {
			return GetRuleContext<FunctionStatementsContext>(0);
		}
		public TextMacroBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textMacroBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterTextMacroBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitTextMacroBlock(this);
		}
	}

	[RuleVersion(0)]
	public TextMacroBlockContext textMacroBlock() {
		TextMacroBlockContext _localctx = new TextMacroBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_textMacroBlock);
		try {
			State = 483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 468; Match(T__5);
				State = 469; Match(TextMacro);
				State = 470; Match(Identifier);
				State = 471; Match(Takes);
				State = 472; functionBlockArguments();
				State = 473; Match(T__5);
				State = 474; Match(EndTextMacro);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 476; Match(T__5);
				State = 477; Match(TextMacro);
				State = 478; Match(Identifier);
				State = 479; functionStatements();
				State = 480; Match(T__5);
				State = 481; Match(EndTextMacro);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RunTextMacroBlockContext : ParserRuleContext {
		public ITerminalNode RunTextMacro() { return GetToken(VJassParser.RunTextMacro, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode Optional() { return GetToken(VJassParser.Optional, 0); }
		public RunTextMacroBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runTextMacroBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterRunTextMacroBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitRunTextMacroBlock(this);
		}
	}

	[RuleVersion(0)]
	public RunTextMacroBlockContext runTextMacroBlock() {
		RunTextMacroBlockContext _localctx = new RunTextMacroBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_runTextMacroBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 485; Match(T__5);
			State = 486; Match(RunTextMacro);
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Optional) {
				{
				State = 487; Match(Optional);
				}
			}

			State = 490; functionCall();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode OpenBracket() { return GetToken(VJassParser.OpenBracket, 0); }
		public ITerminalNode CloseBracket() { return GetToken(VJassParser.CloseBracket, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode Not() { return GetToken(VJassParser.Not, 0); }
		public ITerminalNode Function() { return GetToken(VJassParser.Function, 0); }
		public ITerminalNode Number() { return GetToken(VJassParser.Number, 0); }
		public ITerminalNode String() { return GetToken(VJassParser.String, 0); }
		public ITerminalNode SingleQuoteString() { return GetToken(VJassParser.SingleQuoteString, 0); }
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ITerminalNode And() { return GetToken(VJassParser.And, 0); }
		public ITerminalNode Or() { return GetToken(VJassParser.Or, 0); }
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterSingleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitSingleExpression(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_singleExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 493; Match(T__6);
				State = 494; singleExpression(27);
				}
				break;
			case 2:
				{
				State = 495; Match(T__7);
				State = 496; singleExpression(26);
				}
				break;
			case 3:
				{
				State = 497; Match(T__8);
				State = 498; singleExpression(25);
				}
				break;
			case 4:
				{
				State = 499; Match(T__9);
				State = 500; singleExpression(24);
				}
				break;
			case 5:
				{
				State = 501; Match(OpenBracket);
				State = 502; singleExpression(0);
				State = 503; Match(CloseBracket);
				State = 505;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 504; singleExpression(0);
					}
					break;
				}
				}
				break;
			case 6:
				{
				State = 507; Match(Identifier);
				State = 508; Match(OpenBracket);
				State = 509; singleExpression(0);
				State = 510; Match(CloseBracket);
				State = 512;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 511; singleExpression(0);
					}
					break;
				}
				}
				break;
			case 7:
				{
				State = 514; Match(T__10);
				State = 515; singleExpression(0);
				State = 516; Match(T__11);
				State = 518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 517; singleExpression(0);
					}
					break;
				}
				}
				break;
			case 8:
				{
				State = 520; functionCall();
				}
				break;
			case 9:
				{
				State = 521; Match(Not);
				State = 522; singleExpression(9);
				}
				break;
			case 10:
				{
				State = 523; Match(Function);
				State = 524; Match(Identifier);
				}
				break;
			case 11:
				{
				State = 525; Match(Number);
				}
				break;
			case 12:
				{
				State = 526; Match(String);
				}
				break;
			case 13:
				{
				State = 527; Match(SingleQuoteString);
				}
				break;
			case 14:
				{
				State = 528; Match(Identifier);
				}
				break;
			case 15:
				{
				State = 529; arrayLiteral();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 570;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 568;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 532;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 533; Match(T__6);
						State = 534; singleExpression(21);
						}
						break;
					case 2:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 535;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 536; Match(T__7);
						State = 537; singleExpression(20);
						}
						break;
					case 3:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 538;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 539; Match(T__12);
						State = 540; singleExpression(19);
						}
						break;
					case 4:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 541;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 542; Match(T__13);
						State = 543; singleExpression(18);
						}
						break;
					case 5:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 544;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 545; Match(T__14);
						State = 546; singleExpression(17);
						}
						break;
					case 6:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 547;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 548; Match(T__8);
						State = 549; singleExpression(16);
						}
						break;
					case 7:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 550;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 551; Match(T__2);
						State = 552; singleExpression(15);
						}
						break;
					case 8:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 553;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 554; Match(T__15);
						State = 555; singleExpression(14);
						}
						break;
					case 9:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 556;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 557; Match(T__16);
						State = 558; singleExpression(13);
						}
						break;
					case 10:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 559;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 560; Match(T__17);
						State = 561; singleExpression(12);
						}
						break;
					case 11:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 562;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 563; Match(And);
						State = 564; singleExpression(9);
						}
						break;
					case 12:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 565;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 566; Match(Or);
						State = 567; singleExpression(8);
						}
						break;
					}
					} 
				}
				State = 572;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterExpressionSequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitExpressionSequence(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 80, RULE_expressionSequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; singleExpression(0);
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 574; Match(T__0);
				State = 575; singleExpression(0);
				}
				}
				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ITerminalNode OpenBracket() { return GetToken(VJassParser.OpenBracket, 0); }
		public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public ITerminalNode CloseBracket() { return GetToken(VJassParser.CloseBracket, 0); }
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 82, RULE_arrayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581; Match(OpenBracket);
			State = 582; elementList();
			State = 583; Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 84, RULE_elementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 585; Match(T__0);
					}
					} 
				}
				State = 590;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << Number) | (1L << String) | (1L << SingleQuoteString) | (1L << OpenBracket) | (1L << Not) | (1L << Function))) != 0) || _la==Identifier) {
				{
				State = 591; singleExpression(0);
				}
			}

			State = 602;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 595;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 594; Match(T__0);
						}
						}
						State = 597;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==T__0 );
					State = 599; singleExpression(0);
					}
					} 
				}
				State = 604;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 605; Match(T__0);
				}
				}
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerBlockContext : ParserRuleContext {
		public ITerminalNode Initializer() { return GetToken(VJassParser.Initializer, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public InitializerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterInitializerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitInitializerBlock(this);
		}
	}

	[RuleVersion(0)]
	public InitializerBlockContext initializerBlock() {
		InitializerBlockContext _localctx = new InitializerBlockContext(Context, State);
		EnterRule(_localctx, 86, RULE_initializerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611; Match(Initializer);
			State = 612; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 88, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614; Match(Identifier);
			State = 615; Match(T__10);
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << Number) | (1L << String) | (1L << SingleQuoteString) | (1L << OpenBracket) | (1L << Not) | (1L << Function))) != 0) || _la==Identifier) {
				{
				State = 616; expressionSequence();
				}
			}

			State = 619; Match(T__11);
			State = 621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 620; singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyWordStatementContext : ParserRuleContext {
		public ITerminalNode Keyword() { return GetToken(VJassParser.Keyword, 0); }
		public ITerminalNode Identifier() { return GetToken(VJassParser.Identifier, 0); }
		public ITerminalNode VisibilityScope() { return GetToken(VJassParser.VisibilityScope, 0); }
		public KeyWordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyWordStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.EnterKeyWordStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVJassListener typedListener = listener as IVJassListener;
			if (typedListener != null) typedListener.ExitKeyWordStatement(this);
		}
	}

	[RuleVersion(0)]
	public KeyWordStatementContext keyWordStatement() {
		KeyWordStatementContext _localctx = new KeyWordStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_keyWordStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VisibilityScope) {
				{
				State = 623; Match(VisibilityScope);
				}
			}

			State = 626; Match(Keyword);
			State = 627; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 39: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 8);
		case 11: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'S', '\x278', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'l', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'x', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '~', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x89', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x8D', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x95', '\n', '\a', '\x3', '\b', '\a', '\b', '\x98', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x9B', '\v', '\b', '\x3', '\t', '\a', '\t', '\x9E', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '\xA1', '\v', '\t', '\x3', '\n', 
		'\a', '\n', '\xA4', '\n', '\n', '\f', '\n', '\xE', '\n', '\xA7', '\v', 
		'\n', '\x3', '\v', '\a', '\v', '\xAA', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '\xAD', '\v', '\v', '\x3', '\f', '\a', '\f', '\xB0', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\xB3', '\v', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\xB8', '\n', '\r', '\x3', '\r', '\x5', '\r', 
		'\xBB', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xC2', '\n', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xC7', '\n', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xCA', '\n', '\xE', '\x3', '\xE', '\a', '\xE', '\xCD', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xD0', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xD5', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\a', 
		'\x10', '\xDC', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xDF', '\v', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x5', '\x11', '\xE4', 
		'\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\xE7', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xEB', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xF0', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xFF', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x103', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x5', '\x15', '\x108', '\n', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\a', '\x16', '\x119', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x11C', 
		'\v', '\x16', '\x5', '\x16', '\x11E', '\n', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x5', '\x18', '\x123', '\n', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x128', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x5', '\x19', '\x12E', 
		'\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x5', '\x1B', '\x137', '\n', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x13C', 
		'\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x141', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x149', '\n', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\a', '\x1E', '\x156', '\n', '\x1E', '\f', '\x1E', '\xE', 
		'\x1E', '\x159', '\v', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x15D', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x16B', 
		'\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x16E', '\v', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x172', '\n', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', 
		' ', '\x180', '\n', ' ', '\f', ' ', '\xE', ' ', '\x183', '\v', ' ', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x187', '\n', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '\"', '\x5', '\"', '\x193', '\n', '\"', '\x3', '\"', 
		'\x5', '\"', '\x196', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x19A', '\n', '\"', '\x3', '\"', '\x5', '\"', '\x19D', '\n', '\"', '\x3', 
		'\"', '\x5', '\"', '\x1A0', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x5', '#', '\x1AC', '\n', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\a', 
		'$', '\x1B5', '\n', '$', '\f', '$', '\xE', '$', '\x1B8', '\v', '$', '\x3', 
		'%', '\x5', '%', '\x1BB', '\n', '%', '\x3', '%', '\x5', '%', '\x1BE', 
		'\n', '%', '\x3', '%', '\x5', '%', '\x1C1', '\n', '%', '\x3', '%', '\x5', 
		'%', '\x1C4', '\n', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x1C8', 
		'\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x1CD', '\n', 
		'%', '\x3', '&', '\x5', '&', '\x1D0', '\n', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x5', '\'', '\x1E6', '\n', '\'', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x5', '(', '\x1EB', '\n', '(', '\x3', '(', '\x3', '(', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x5', ')', '\x1FC', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x5', ')', '\x203', '\n', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x5', ')', '\x209', '\n', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x215', '\n', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', 
		')', '\x23B', '\n', ')', '\f', ')', '\xE', ')', '\x23E', '\v', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\a', '*', '\x243', '\n', '*', '\f', '*', 
		'\xE', '*', '\x246', '\v', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', ',', '\a', ',', '\x24D', '\n', ',', '\f', ',', '\xE', ',', 
		'\x250', '\v', ',', '\x3', ',', '\x5', ',', '\x253', '\n', ',', '\x3', 
		',', '\x6', ',', '\x256', '\n', ',', '\r', ',', '\xE', ',', '\x257', '\x3', 
		',', '\a', ',', '\x25B', '\n', ',', '\f', ',', '\xE', ',', '\x25E', '\v', 
		',', '\x3', ',', '\a', ',', '\x261', '\n', ',', '\f', ',', '\xE', ',', 
		'\x264', '\v', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x5', '.', '\x26C', '\n', '.', '\x3', '.', '\x3', '.', 
		'\x5', '.', '\x270', '\n', '.', '\x3', '/', '\x5', '/', '\x273', '\n', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x2', '\x3', 'P', 
		'\x30', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '\x2', '\x6', '\x3', '\x2', '\x1F', '\x1F', '\x4', '\x2', '\x35', 
		'\x35', 'S', 'S', '\x3', '\x2', '\x4', '\a', '\x4', '\x2', ' ', ' ', 'S', 
		'S', '\x2', '\x2C6', '\x2', '^', '\x3', '\x2', '\x2', '\x2', '\x4', 'k', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'w', '\x3', '\x2', '\x2', '\x2', '\b', 
		'}', '\x3', '\x2', '\x2', '\x2', '\n', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x94', '\x3', '\x2', '\x2', '\x2', '\xE', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x18', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xE3', '\x3', '\x2', '\x2', '\x2', '\"', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xF6', '\x3', '\x2', '\x2', '\x2', '&', '\x100', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x107', '\x3', '\x2', '\x2', '\x2', '*', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x122', '\x3', '\x2', '\x2', '\x2', '\x30', '\x12D', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x132', '\x3', '\x2', '\x2', '\x2', '\x34', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x146', '\x3', '\x2', '\x2', '\x2', ':', '\x14C', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x160', '\x3', '\x2', '\x2', '\x2', '>', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x192', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1A8', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1B0', '\x3', '\x2', '\x2', '\x2', 'H', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1E5', '\x3', '\x2', '\x2', '\x2', 'N', '\x1E7', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x214', '\x3', '\x2', '\x2', '\x2', 'R', '\x23F', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x247', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x24E', '\x3', '\x2', '\x2', '\x2', 'X', '\x265', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x268', '\x3', '\x2', '\x2', '\x2', '\\', '\x272', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\x5', '\xE', '\b', '\x2', '_', 
		'`', '\a', '\x2', '\x2', '\x3', '`', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x61', 'l', '\x5', '\x18', '\r', '\x2', '\x62', 'l', '\x5', '\x1E', '\x10', 
		'\x2', '\x63', 'l', '\x5', '\"', '\x12', '\x2', '\x64', 'l', '\x5', '(', 
		'\x15', '\x2', '\x65', 'l', '\x5', '\x44', '#', '\x2', '\x66', 'l', '\x5', 
		'@', '!', '\x2', 'g', 'l', '\x5', '\\', '/', '\x2', 'h', 'l', '\x5', 'L', 
		'\'', '\x2', 'i', 'l', '\x5', 'N', '(', '\x2', 'j', 'l', '\x5', 'J', '&', 
		'\x2', 'k', '\x61', '\x3', '\x2', '\x2', '\x2', 'k', '\x62', '\x3', '\x2', 
		'\x2', '\x2', 'k', '\x63', '\x3', '\x2', '\x2', '\x2', 'k', '\x64', '\x3', 
		'\x2', '\x2', '\x2', 'k', '\x65', '\x3', '\x2', '\x2', '\x2', 'k', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'k', 'g', '\x3', '\x2', '\x2', '\x2', 'k', 
		'h', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'k', 'j', '\x3', '\x2', '\x2', '\x2', 'l', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'x', '\x5', '\x1E', '\x10', '\x2', 'n', 'x', '\x5', '\"', 
		'\x12', '\x2', 'o', 'x', '\x5', '(', '\x15', '\x2', 'p', 'x', '\x5', '\x42', 
		'\"', '\x2', 'q', 'x', '\x5', '\x44', '#', '\x2', 'r', 'x', '\x5', '@', 
		'!', '\x2', 's', 'x', '\x5', '\\', '/', '\x2', 't', 'x', '\x5', 'L', '\'', 
		'\x2', 'u', 'x', '\x5', 'N', '(', '\x2', 'v', 'x', '\x5', 'J', '&', '\x2', 
		'w', 'm', '\x3', '\x2', '\x2', '\x2', 'w', 'n', '\x3', '\x2', '\x2', '\x2', 
		'w', 'o', '\x3', '\x2', '\x2', '\x2', 'w', 'p', '\x3', '\x2', '\x2', '\x2', 
		'w', 'q', '\x3', '\x2', '\x2', '\x2', 'w', 'r', '\x3', '\x2', '\x2', '\x2', 
		'w', 's', '\x3', '\x2', '\x2', '\x2', 'w', 't', '\x3', '\x2', '\x2', '\x2', 
		'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'v', '\x3', '\x2', '\x2', '\x2', 
		'x', '\a', '\x3', '\x2', '\x2', '\x2', 'y', '~', '\x5', '$', '\x13', '\x2', 
		'z', '~', '\x5', '&', '\x14', '\x2', '{', '~', '\x5', 'L', '\'', '\x2', 
		'|', '~', '\x5', 'N', '(', '\x2', '}', 'y', '\x3', '\x2', '\x2', '\x2', 
		'}', 'z', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', 
		'}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x8D', '\x5', '.', '\x18', '\x2', '\x80', '\x8D', '\x5', 
		'\x30', '\x19', '\x2', '\x81', '\x8D', '\x5', '\x32', '\x1A', '\x2', '\x82', 
		'\x8D', '\x5', ':', '\x1E', '\x2', '\x83', '\x8D', '\x5', '\x34', '\x1B', 
		'\x2', '\x84', '\x8D', '\x5', '\x36', '\x1C', '\x2', '\x85', '\x8D', '\x5', 
		'>', ' ', '\x2', '\x86', '\x88', '\a', '\x45', '\x2', '\x2', '\x87', '\x89', 
		'\x5', 'P', ')', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8D', '\x5', 'L', '\'', '\x2', '\x8B', '\x8D', '\x5', 
		'N', '(', '\x2', '\x8C', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x82', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x84', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\v', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x95', 
		'\x5', '\x42', '\"', '\x2', '\x8F', '\x95', '\x5', '\x38', '\x1D', '\x2', 
		'\x90', '\x95', '\x5', '<', '\x1F', '\x2', '\x91', '\x95', '\x5', 'L', 
		'\'', '\x2', '\x92', '\x95', '\x5', 'N', '(', '\x2', '\x93', '\x95', '\x5', 
		'H', '%', '\x2', '\x94', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x94', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x91', '\x3', '\x2', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\x5', '\x4', '\x3', '\x2', 
		'\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\x5', '\x6', 
		'\x4', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', 
		'\x5', '\b', '\x5', '\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xAA', '\x5', '\n', '\x6', '\x2', '\xA9', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xB0', '\x5', '\f', '\a', '\x2', '\xAF', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\x17', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '!', '\x2', '\x2', '\xB5', 
		'\xB7', '\a', 'S', '\x2', '\x2', '\xB6', '\xB8', '\x5', 'X', '-', '\x2', 
		'\xB7', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBB', 
		'\x5', '\x1A', '\xE', '\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xBD', '\x5', '\x10', '\t', '\x2', '\xBD', '\xBE', 
		'\a', '\"', '\x2', '\x2', '\xBE', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xC1', '\a', '&', '\x2', '\x2', '\xC0', '\xC2', '\a', '#', '\x2', 
		'\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xCE', '\a', 'S', '\x2', '\x2', '\xC4', '\xC7', '\a', '\x3', '\x2', '\x2', 
		'\xC5', '\xC7', '\n', '\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', '\a', '#', '\x2', '\x2', '\xC9', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCD', '\a', 
		'S', '\x2', '\x2', '\xCC', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\a', 'J', '\x2', '\x2', '\xD2', '\xD4', '\a', 'S', '\x2', '\x2', 
		'\xD3', '\xD5', '\x5', 'X', '-', '\x2', '\xD4', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x5', '\x10', '\t', '\x2', 
		'\xD7', '\xD8', '\a', 'K', '\x2', '\x2', '\xD8', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xDD', '\a', '$', '\x2', '\x2', '\xDA', '\xDC', 
		'\x5', ' ', '\x11', '\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xE1', '\a', '%', '\x2', '\x2', '\xE1', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE4', '\a', '\'', '\x2', '\x2', '\xE3', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', '\a', '(', 
		'\x2', '\x2', '\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xEA', '\a', 'S', '\x2', '\x2', '\xE9', '\xEB', '\a', ' ', '\x2', 
		'\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xEF', '\a', 'S', '\x2', '\x2', '\xED', '\xEE', '\a', '\x4', '\x2', '\x2', 
		'\xEE', '\xF0', '\x5', 'P', ')', '\x2', '\xEF', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '!', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\a', '.', '\x2', '\x2', '\xF2', 
		'\xF3', '\a', 'S', '\x2', '\x2', '\xF3', '\xF4', '\x5', '\x12', '\n', 
		'\x2', '\xF4', '\xF5', '\a', '/', '\x2', '\x2', '\xF5', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\xF7', '\a', '\x36', '\x2', '\x2', '\xF7', '\xF8', 
		'\a', 'S', '\x2', '\x2', '\xF8', '\xF9', '\a', '\x32', '\x2', '\x2', '\xF9', 
		'\xFA', '\x5', '*', '\x16', '\x2', '\xFA', '\xFB', '\a', '\x34', '\x2', 
		'\x2', '\xFB', '\xFE', '\x5', ',', '\x17', '\x2', '\xFC', '\xFD', '\a', 
		'\x38', '\x2', '\x2', '\xFD', '\xFF', '\x5', ',', '\x17', '\x2', '\xFE', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '%', '\x3', '\x2', '\x2', '\x2', '\x100', '\x102', '\a', 
		'S', '\x2', '\x2', '\x101', '\x103', '\a', ' ', '\x2', '\x2', '\x102', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', 
		'\a', 'S', '\x2', '\x2', '\x105', '\'', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x108', '\a', '\'', '\x2', '\x2', '\x107', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', '\x30', '\x2', '\x2', 
		'\x10A', '\x10B', '\a', 'S', '\x2', '\x2', '\x10B', '\x10C', '\a', '\x32', 
		'\x2', '\x2', '\x10C', '\x10D', '\x5', '*', '\x16', '\x2', '\x10D', '\x10E', 
		'\a', '\x34', '\x2', '\x2', '\x10E', '\x10F', '\x5', ',', '\x17', '\x2', 
		'\x10F', '\x110', '\x5', '\x14', '\v', '\x2', '\x110', '\x111', '\a', 
		'\x31', '\x2', '\x2', '\x111', ')', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x11E', '\a', '\x35', '\x2', '\x2', '\x113', '\x114', '\a', 'S', '\x2', 
		'\x2', '\x114', '\x11A', '\a', 'S', '\x2', '\x2', '\x115', '\x116', '\a', 
		'\x3', '\x2', '\x2', '\x116', '\x117', '\a', 'S', '\x2', '\x2', '\x117', 
		'\x119', '\a', 'S', '\x2', '\x2', '\x118', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x112', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x11E', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x120', '\t', '\x3', '\x2', '\x2', '\x120', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x123', '\a', 'L', '\x2', '\x2', '\x122', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', 
		'\a', '-', '\x2', '\x2', '\x125', '\x127', '\a', 'S', '\x2', '\x2', '\x126', 
		'\x128', '\x5', 'P', ')', '\x2', '\x127', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\a', '\x4', '\x2', '\x2', 
		'\x12A', '\x12B', '\x5', 'P', ')', '\x2', '\x12B', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x12C', '\x12E', '\a', 'L', '\x2', '\x2', '\x12D', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\a', 
		',', '\x2', '\x2', '\x130', '\x131', '\x5', 'P', ')', '\x2', '\x131', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\a', '\x33', '\x2', 
		'\x2', '\x133', '\x134', '\x5', 'P', ')', '\x2', '\x134', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x137', '\a', 'L', '\x2', '\x2', '\x136', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', 
		'\a', '\x43', '\x2', '\x2', '\x139', '\x13B', '\a', 'S', '\x2', '\x2', 
		'\x13A', '\x13C', '\a', ' ', '\x2', '\x2', '\x13B', '\x13A', '\x3', '\x2', 
		'\x2', '\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x140', '\a', 'S', '\x2', '\x2', 
		'\x13E', '\x13F', '\a', '\x4', '\x2', '\x2', '\x13F', '\x141', '\x5', 
		'P', ')', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x143', '\a', '\x44', '\x2', '\x2', '\x143', '\x144', 
		'\x5', '\x14', '\v', '\x2', '\x144', '\x145', '\a', '\x46', '\x2', '\x2', 
		'\x145', '\x37', '\x3', '\x2', '\x2', '\x2', '\x146', '\x148', '\a', 'G', 
		'\x2', '\x2', '\x147', '\x149', '\a', '#', '\x2', '\x2', '\x148', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\a', 
		'S', '\x2', '\x2', '\x14B', '\x39', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x14D', '\a', '>', '\x2', '\x2', '\x14D', '\x14E', '\x5', 'P', ')', '\x2', 
		'\x14E', '\x14F', '\a', '@', '\x2', '\x2', '\x14F', '\x157', '\x5', '\x14', 
		'\v', '\x2', '\x150', '\x151', '\a', '\x41', '\x2', '\x2', '\x151', '\x152', 
		'\x5', 'P', ')', '\x2', '\x152', '\x153', '\a', '@', '\x2', '\x2', '\x153', 
		'\x154', '\x5', '\x14', '\v', '\x2', '\x154', '\x156', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x150', '\x3', '\x2', '\x2', '\x2', '\x156', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x158', '\x3', '\x2', '\x2', '\x2', '\x158', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x157', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x15B', '\a', '\x42', '\x2', '\x2', '\x15B', '\x15D', '\x5', '\x14', 
		'\v', '\x2', '\x15C', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'\x15E', '\x15F', '\a', '?', '\x2', '\x2', '\x15F', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x160', '\x161', '\a', '\x39', '\x2', '\x2', '\x161', '\x162', 
		'\a', '>', '\x2', '\x2', '\x162', '\x163', '\x5', 'P', ')', '\x2', '\x163', 
		'\x164', '\a', '@', '\x2', '\x2', '\x164', '\x16C', '\x5', '\x16', '\f', 
		'\x2', '\x165', '\x166', '\a', '\x41', '\x2', '\x2', '\x166', '\x167', 
		'\x5', 'P', ')', '\x2', '\x167', '\x168', '\a', '@', '\x2', '\x2', '\x168', 
		'\x169', '\x5', '\x16', '\f', '\x2', '\x169', '\x16B', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x165', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x16E', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x170', '\a', '\x42', '\x2', '\x2', '\x170', '\x172', '\x5', '\x16', 
		'\f', '\x2', '\x171', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x174', '\a', '?', '\x2', '\x2', '\x174', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x175', '\x176', '\a', '\x39', '\x2', '\x2', '\x176', '\x177', 
		'\a', '>', '\x2', '\x2', '\x177', '\x178', '\x5', 'P', ')', '\x2', '\x178', 
		'\x179', '\a', '@', '\x2', '\x2', '\x179', '\x181', '\x5', '\x14', '\v', 
		'\x2', '\x17A', '\x17B', '\a', '\x41', '\x2', '\x2', '\x17B', '\x17C', 
		'\x5', 'P', ')', '\x2', '\x17C', '\x17D', '\a', '@', '\x2', '\x2', '\x17D', 
		'\x17E', '\x5', '\x14', '\v', '\x2', '\x17E', '\x180', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x180', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x181', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x185', '\a', '\x42', '\x2', '\x2', '\x185', '\x187', '\x5', '\x14', 
		'\v', '\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x189', '\a', '?', '\x2', '\x2', '\x189', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x18A', '\x18B', '\a', 'I', '\x2', '\x2', '\x18B', '\x18C', 
		'\a', 'S', '\x2', '\x2', '\x18C', '\x18D', '\a', '\x32', '\x2', '\x2', 
		'\x18D', '\x18E', '\x5', '*', '\x16', '\x2', '\x18E', '\x18F', '\a', '\x34', 
		'\x2', '\x2', '\x18F', '\x190', '\x5', ',', '\x17', '\x2', '\x190', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x193', '\a', '\'', '\x2', '\x2', 
		'\x192', '\x191', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x195', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x196', '\a', '\x39', '\x2', '\x2', '\x195', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x195', '\x196', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x199', '\a', '\x36', '\x2', '\x2', 
		'\x198', '\x19A', '\a', '=', '\x2', '\x2', '\x199', '\x198', '\x3', '\x2', 
		'\x2', '\x2', '\x199', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19C', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x19D', '\a', 'S', '\x2', '\x2', 
		'\x19C', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', 
		'\x2', '\x2', '\x2', '\x19D', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19E', 
		'\x1A0', '\t', '\x4', '\x2', '\x2', '\x19F', '\x19E', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\a', '\x32', '\x2', '\x2', 
		'\x1A2', '\x1A3', '\x5', '*', '\x16', '\x2', '\x1A3', '\x1A4', '\a', '\x34', 
		'\x2', '\x2', '\x1A4', '\x1A5', '\x5', ',', '\x17', '\x2', '\x1A5', '\x1A6', 
		'\x5', '\x14', '\v', '\x2', '\x1A6', '\x1A7', '\a', '\x37', '\x2', '\x2', 
		'\x1A7', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\a', ':', 
		'\x2', '\x2', '\x1A9', '\x1AB', '\a', 'S', '\x2', '\x2', '\x1AA', '\x1AC', 
		'\x5', '\x46', '$', '\x2', '\x1AB', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x5', '\x16', '\f', '\x2', '\x1AE', 
		'\x1AF', '\a', ';', '\x2', '\x2', '\x1AF', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x1B0', '\x1B1', '\a', '<', '\x2', '\x2', '\x1B1', '\x1B6', '\t', 
		'\x5', '\x2', '\x2', '\x1B2', '\x1B3', '\a', '\x3', '\x2', '\x2', '\x1B3', 
		'\x1B5', '\a', 'S', '\x2', '\x2', '\x1B4', '\x1B2', '\x3', '\x2', '\x2', 
		'\x2', '\x1B5', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\x3', '\x2', '\x2', '\x2', 
		'\x1B7', 'G', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B6', '\x3', '\x2', 
		'\x2', '\x2', '\x1B9', '\x1BB', '\a', 'L', '\x2', '\x2', '\x1BA', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BE', '\a', 
		'\'', '\x2', '\x2', '\x1BD', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BD', 
		'\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C0', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1C1', '\a', '\x39', '\x2', '\x2', '\x1C0', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x1C1', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C4', '\a', 
		'(', '\x2', '\x2', '\x1C3', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x1C7', '\a', 'S', '\x2', '\x2', '\x1C6', '\x1C8', '\a', 
		' ', '\x2', '\x2', '\x1C7', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C7', 
		'\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\x1C9', '\x1CC', '\a', 'S', '\x2', '\x2', '\x1CA', '\x1CB', '\a', 
		'\x4', '\x2', '\x2', '\x1CB', '\x1CD', '\x5', 'P', ')', '\x2', '\x1CC', 
		'\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\x3', '\x2', '\x2', 
		'\x2', '\x1CD', 'I', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1D0', '\a', 
		'\'', '\x2', '\x2', '\x1CF', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CF', 
		'\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', 
		'\x2', '\x1D1', '\x1D2', '\a', 'Q', '\x2', '\x2', '\x1D2', '\x1D3', '\a', 
		'S', '\x2', '\x2', '\x1D3', '\x1D4', '\x5', '\x10', '\t', '\x2', '\x1D4', 
		'\x1D5', '\a', 'R', '\x2', '\x2', '\x1D5', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x1D7', '\a', '\b', '\x2', '\x2', '\x1D7', '\x1D8', '\a', 'N', 
		'\x2', '\x2', '\x1D8', '\x1D9', '\a', 'S', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\a', '\x32', '\x2', '\x2', '\x1DA', '\x1DB', '\x5', '*', '\x16', '\x2', 
		'\x1DB', '\x1DC', '\a', '\b', '\x2', '\x2', '\x1DC', '\x1DD', '\a', 'O', 
		'\x2', '\x2', '\x1DD', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', 
		'\a', '\b', '\x2', '\x2', '\x1DF', '\x1E0', '\a', 'N', '\x2', '\x2', '\x1E0', 
		'\x1E1', '\a', 'S', '\x2', '\x2', '\x1E1', '\x1E2', '\x5', '\x14', '\v', 
		'\x2', '\x1E2', '\x1E3', '\a', '\b', '\x2', '\x2', '\x1E3', '\x1E4', '\a', 
		'O', '\x2', '\x2', '\x1E4', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E5', 
		'\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1DE', '\x3', '\x2', '\x2', 
		'\x2', '\x1E6', 'M', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\a', 
		'\b', '\x2', '\x2', '\x1E8', '\x1EA', '\a', 'P', '\x2', '\x2', '\x1E9', 
		'\x1EB', '\a', '#', '\x2', '\x2', '\x1EA', '\x1E9', '\x3', '\x2', '\x2', 
		'\x2', '\x1EA', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\x5', 'Z', '.', '\x2', 
		'\x1ED', 'O', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\b', ')', 
		'\x1', '\x2', '\x1EF', '\x1F0', '\a', '\t', '\x2', '\x2', '\x1F0', '\x215', 
		'\x5', 'P', ')', '\x1D', '\x1F1', '\x1F2', '\a', '\n', '\x2', '\x2', '\x1F2', 
		'\x215', '\x5', 'P', ')', '\x1C', '\x1F3', '\x1F4', '\a', '\v', '\x2', 
		'\x2', '\x1F4', '\x215', '\x5', 'P', ')', '\x1B', '\x1F5', '\x1F6', '\a', 
		'\f', '\x2', '\x2', '\x1F6', '\x215', '\x5', 'P', ')', '\x1A', '\x1F7', 
		'\x1F8', '\a', '\x1D', '\x2', '\x2', '\x1F8', '\x1F9', '\x5', 'P', ')', 
		'\x2', '\x1F9', '\x1FB', '\a', '\x1E', '\x2', '\x2', '\x1FA', '\x1FC', 
		'\x5', 'P', ')', '\x2', '\x1FB', '\x1FA', '\x3', '\x2', '\x2', '\x2', 
		'\x1FB', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\a', 'S', '\x2', '\x2', '\x1FE', 
		'\x1FF', '\a', '\x1D', '\x2', '\x2', '\x1FF', '\x200', '\x5', 'P', ')', 
		'\x2', '\x200', '\x202', '\a', '\x1E', '\x2', '\x2', '\x201', '\x203', 
		'\x5', 'P', ')', '\x2', '\x202', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'\x202', '\x203', '\x3', '\x2', '\x2', '\x2', '\x203', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\x204', '\x205', '\a', '\r', '\x2', '\x2', '\x205', 
		'\x206', '\x5', 'P', ')', '\x2', '\x206', '\x208', '\a', '\xE', '\x2', 
		'\x2', '\x207', '\x209', '\x5', 'P', ')', '\x2', '\x208', '\x207', '\x3', 
		'\x2', '\x2', '\x2', '\x208', '\x209', '\x3', '\x2', '\x2', '\x2', '\x209', 
		'\x215', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x215', '\x5', 'Z', '.', 
		'\x2', '\x20B', '\x20C', '\a', ')', '\x2', '\x2', '\x20C', '\x215', '\x5', 
		'P', ')', '\v', '\x20D', '\x20E', '\a', '\x30', '\x2', '\x2', '\x20E', 
		'\x215', '\a', 'S', '\x2', '\x2', '\x20F', '\x215', '\a', '\x1A', '\x2', 
		'\x2', '\x210', '\x215', '\a', '\x1B', '\x2', '\x2', '\x211', '\x215', 
		'\a', '\x1C', '\x2', '\x2', '\x212', '\x215', '\a', 'S', '\x2', '\x2', 
		'\x213', '\x215', '\x5', 'T', '+', '\x2', '\x214', '\x1EE', '\x3', '\x2', 
		'\x2', '\x2', '\x214', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x214', '\x1F3', 
		'\x3', '\x2', '\x2', '\x2', '\x214', '\x1F5', '\x3', '\x2', '\x2', '\x2', 
		'\x214', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x214', '\x1FD', '\x3', 
		'\x2', '\x2', '\x2', '\x214', '\x204', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x20A', '\x3', '\x2', '\x2', '\x2', '\x214', '\x20B', '\x3', '\x2', '\x2', 
		'\x2', '\x214', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x214', '\x20F', 
		'\x3', '\x2', '\x2', '\x2', '\x214', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'\x214', '\x211', '\x3', '\x2', '\x2', '\x2', '\x214', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x214', '\x213', '\x3', '\x2', '\x2', '\x2', '\x215', 
		'\x23C', '\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\f', '\x16', '\x2', 
		'\x2', '\x217', '\x218', '\a', '\t', '\x2', '\x2', '\x218', '\x23B', '\x5', 
		'P', ')', '\x17', '\x219', '\x21A', '\f', '\x15', '\x2', '\x2', '\x21A', 
		'\x21B', '\a', '\n', '\x2', '\x2', '\x21B', '\x23B', '\x5', 'P', ')', 
		'\x16', '\x21C', '\x21D', '\f', '\x14', '\x2', '\x2', '\x21D', '\x21E', 
		'\a', '\xF', '\x2', '\x2', '\x21E', '\x23B', '\x5', 'P', ')', '\x15', 
		'\x21F', '\x220', '\f', '\x13', '\x2', '\x2', '\x220', '\x221', '\a', 
		'\x10', '\x2', '\x2', '\x221', '\x23B', '\x5', 'P', ')', '\x14', '\x222', 
		'\x223', '\f', '\x12', '\x2', '\x2', '\x223', '\x224', '\a', '\x11', '\x2', 
		'\x2', '\x224', '\x23B', '\x5', 'P', ')', '\x13', '\x225', '\x226', '\f', 
		'\x11', '\x2', '\x2', '\x226', '\x227', '\a', '\v', '\x2', '\x2', '\x227', 
		'\x23B', '\x5', 'P', ')', '\x12', '\x228', '\x229', '\f', '\x10', '\x2', 
		'\x2', '\x229', '\x22A', '\a', '\x5', '\x2', '\x2', '\x22A', '\x23B', 
		'\x5', 'P', ')', '\x11', '\x22B', '\x22C', '\f', '\xF', '\x2', '\x2', 
		'\x22C', '\x22D', '\a', '\x12', '\x2', '\x2', '\x22D', '\x23B', '\x5', 
		'P', ')', '\x10', '\x22E', '\x22F', '\f', '\xE', '\x2', '\x2', '\x22F', 
		'\x230', '\a', '\x13', '\x2', '\x2', '\x230', '\x23B', '\x5', 'P', ')', 
		'\xF', '\x231', '\x232', '\f', '\r', '\x2', '\x2', '\x232', '\x233', '\a', 
		'\x14', '\x2', '\x2', '\x233', '\x23B', '\x5', 'P', ')', '\xE', '\x234', 
		'\x235', '\f', '\n', '\x2', '\x2', '\x235', '\x236', '\a', '*', '\x2', 
		'\x2', '\x236', '\x23B', '\x5', 'P', ')', '\v', '\x237', '\x238', '\f', 
		'\t', '\x2', '\x2', '\x238', '\x239', '\a', '+', '\x2', '\x2', '\x239', 
		'\x23B', '\x5', 'P', ')', '\n', '\x23A', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x23A', '\x219', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', '\x23A', '\x21F', '\x3', '\x2', '\x2', '\x2', 
		'\x23A', '\x222', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x225', '\x3', 
		'\x2', '\x2', '\x2', '\x23A', '\x228', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x23A', '\x231', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x23A', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'\x23B', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23A', '\x3', 
		'\x2', '\x2', '\x2', '\x23C', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23D', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x23C', '\x3', '\x2', '\x2', 
		'\x2', '\x23F', '\x244', '\x5', 'P', ')', '\x2', '\x240', '\x241', '\a', 
		'\x3', '\x2', '\x2', '\x241', '\x243', '\x5', 'P', ')', '\x2', '\x242', 
		'\x240', '\x3', '\x2', '\x2', '\x2', '\x243', '\x246', '\x3', '\x2', '\x2', 
		'\x2', '\x244', '\x242', '\x3', '\x2', '\x2', '\x2', '\x244', '\x245', 
		'\x3', '\x2', '\x2', '\x2', '\x245', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x246', '\x244', '\x3', '\x2', '\x2', '\x2', '\x247', '\x248', '\a', 
		'\x1D', '\x2', '\x2', '\x248', '\x249', '\x5', 'V', ',', '\x2', '\x249', 
		'\x24A', '\a', '\x1E', '\x2', '\x2', '\x24A', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x24B', '\x24D', '\a', '\x3', '\x2', '\x2', '\x24C', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x250', '\x3', '\x2', '\x2', '\x2', 
		'\x24E', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\x3', 
		'\x2', '\x2', '\x2', '\x24F', '\x252', '\x3', '\x2', '\x2', '\x2', '\x250', 
		'\x24E', '\x3', '\x2', '\x2', '\x2', '\x251', '\x253', '\x5', 'P', ')', 
		'\x2', '\x252', '\x251', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', 
		'\x3', '\x2', '\x2', '\x2', '\x253', '\x25C', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x256', '\a', '\x3', '\x2', '\x2', '\x255', '\x254', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x257', '\x3', '\x2', '\x2', '\x2', '\x257', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\x3', '\x2', '\x2', 
		'\x2', '\x258', '\x259', '\x3', '\x2', '\x2', '\x2', '\x259', '\x25B', 
		'\x5', 'P', ')', '\x2', '\x25A', '\x255', '\x3', '\x2', '\x2', '\x2', 
		'\x25B', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25A', '\x3', 
		'\x2', '\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25D', 
		'\x262', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25C', '\x3', '\x2', '\x2', 
		'\x2', '\x25F', '\x261', '\a', '\x3', '\x2', '\x2', '\x260', '\x25F', 
		'\x3', '\x2', '\x2', '\x2', '\x261', '\x264', '\x3', '\x2', '\x2', '\x2', 
		'\x262', '\x260', '\x3', '\x2', '\x2', '\x2', '\x262', '\x263', '\x3', 
		'\x2', '\x2', '\x2', '\x263', 'W', '\x3', '\x2', '\x2', '\x2', '\x264', 
		'\x262', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', '\a', 'H', '\x2', 
		'\x2', '\x266', '\x267', '\a', 'S', '\x2', '\x2', '\x267', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x268', '\x269', '\a', 'S', '\x2', '\x2', '\x269', 
		'\x26B', '\a', '\r', '\x2', '\x2', '\x26A', '\x26C', '\x5', 'R', '*', 
		'\x2', '\x26B', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', 
		'\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', '\x3', '\x2', '\x2', '\x2', 
		'\x26D', '\x26F', '\a', '\xE', '\x2', '\x2', '\x26E', '\x270', '\x5', 
		'P', ')', '\x2', '\x26F', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x26F', 
		'\x270', '\x3', '\x2', '\x2', '\x2', '\x270', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x271', '\x273', '\a', '\'', '\x2', '\x2', '\x272', '\x271', '\x3', 
		'\x2', '\x2', '\x2', '\x272', '\x273', '\x3', '\x2', '\x2', '\x2', '\x273', 
		'\x274', '\x3', '\x2', '\x2', '\x2', '\x274', '\x275', '\a', 'M', '\x2', 
		'\x2', '\x275', '\x276', '\a', 'S', '\x2', '\x2', '\x276', ']', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'k', 'w', '}', '\x88', '\x8C', '\x94', '\x99', 
		'\x9F', '\xA5', '\xAB', '\xB1', '\xB7', '\xBA', '\xC1', '\xC6', '\xC9', 
		'\xCE', '\xD4', '\xDD', '\xE3', '\xE6', '\xEA', '\xEF', '\xFE', '\x102', 
		'\x107', '\x11A', '\x11D', '\x122', '\x127', '\x12D', '\x136', '\x13B', 
		'\x140', '\x148', '\x157', '\x15C', '\x16C', '\x171', '\x181', '\x186', 
		'\x192', '\x195', '\x199', '\x19C', '\x19F', '\x1AB', '\x1B6', '\x1BA', 
		'\x1BD', '\x1C0', '\x1C3', '\x1C7', '\x1CC', '\x1CF', '\x1E5', '\x1EA', 
		'\x1FB', '\x202', '\x208', '\x214', '\x23A', '\x23C', '\x244', '\x24E', 
		'\x252', '\x257', '\x25C', '\x262', '\x26B', '\x26F', '\x272',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
